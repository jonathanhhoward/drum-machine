{"version":3,"sources":["components/DrumDisplay.js","components/DrumPad.js","components/DrumSet.js","App.js","serviceWorker.js","index.js"],"names":["DrumDisplay","output","Container","className","fluid","Card","id","Body","DrumPad","pad","onClick","Button","block","name","value","variant","key","src","process","DrumSet","map","row","rowIndex","Row","col","colIndex","Col","App","useState","setOutput","handleKeyDown","KEY","toUpperCase","includes","audioElem","document","getElementById","button","closest","play","useEffect","addEventListener","removeEventListener","target","querySelector","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAceA,MAVf,YAAkC,IAAXC,EAAU,EAAVA,OACrB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAK,GACnC,kBAACC,EAAA,EAAD,CAAMF,UAAU,uCAAuCG,GAAG,WACxD,kBAACD,EAAA,EAAKE,KAAN,CAAWJ,UAAU,mBAAmBF,M,QCejCO,MApBf,YAAoC,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,QACtB,OACE,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLT,UAAU,gCACVG,GAAIG,EAAII,KACRH,QAASA,EACTI,MAAOL,EAAII,KACXE,QAAQ,QAEPN,EAAIO,IACL,2BACEb,UAAU,OACVG,GAAIG,EAAIO,IACRC,IAAG,UAAKC,gBAAL,mBAAsCT,EAAII,KAA1C,Y,eCuBIM,MAlCf,YAA+B,IAAZT,EAAW,EAAXA,QAmBjB,OACE,kBAACR,EAAA,EAAD,CAAWC,UAAU,WAAWC,OAAK,GAnBvB,CACd,CACE,CAAEY,IAAK,IAAKH,KAAM,YAClB,CAAEG,IAAK,IAAKH,KAAM,cAClB,CAAEG,IAAK,IAAKH,KAAM,UAEpB,CACE,CAAEG,IAAK,IAAKH,KAAM,cAClB,CAAEG,IAAK,IAAKH,KAAM,SAClB,CAAEG,IAAK,IAAKH,KAAM,eAEpB,CACE,CAAEG,IAAK,IAAKH,KAAM,QAClB,CAAEG,IAAK,IAAKH,KAAM,OAClB,CAAEG,IAAK,IAAKH,KAAM,UAMTO,KAAI,SAACC,EAAKC,GAAN,OACX,kBAACC,EAAA,EAAD,CAAKpB,UAAU,WAAWa,IAAKM,GAC5BD,EAAID,KAAI,SAACI,EAAKC,GAAN,OACP,kBAACC,EAAA,EAAD,CAAKvB,UAAU,MAAMa,IAAKS,GACxB,kBAAC,EAAD,CAAShB,IAAKe,EAAKd,QAASA,c,MCQ3BiB,MAjCf,WAAgB,IAAD,EACeC,mBAAS,cADxB,mBACN3B,EADM,KACE4B,EADF,KAQb,SAASC,EAAT,GAAiC,IACzBC,EADwB,EAAPf,IACPgB,cAEhB,GAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKC,SAASF,GAA5D,CAEA,IAAMG,EAAYC,SAASC,eAAeL,GACpCM,EAASH,EAAUI,QAAQ,aACjCT,EAAUQ,EAAOvB,OACjBoB,EAAUK,QASZ,OAtBAC,qBAAU,WAER,OADAL,SAASM,iBAAiB,UAAWX,GAC9B,kBAAMK,SAASO,oBAAoB,UAAWZ,MACpD,IAoBD,kBAAC5B,EAAA,EAAD,CAAWC,UAAU,yBAAyBC,OAAK,EAACE,GAAG,gBACrD,kBAAC,EAAD,CAAaL,OAAQA,IACrB,kBAAC,EAAD,CAASS,QATb,YAA0C,IAAX2B,EAAU,EAAlBM,OACfT,EAAYG,EAAOO,cAAc,SACvCf,EAAUQ,EAAOvB,OACjBoB,EAAUK,YChBMM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASS,cAAc,UD4H1C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.d222c70f.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\n\nfunction DrumDisplay({ output }) {\n  return (\n    <Container className=\"h-25 p-1\" fluid>\n      <Card className=\"bg-info h-100 rounded-lg text-center\" id=\"display\">\n        <Card.Body className=\"center-vertical\">{output}</Card.Body>\n      </Card>\n    </Container>\n  );\n}\n\nexport default DrumDisplay;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nfunction DrumPad({ pad, onClick }) {\n  return (\n    <Button\n      block\n      className=\"drum-pad h-100 p-0 rounded-lg\"\n      id={pad.name}\n      onClick={onClick}\n      value={pad.name}\n      variant=\"info\"\n    >\n      {pad.key}\n      <audio\n        className=\"clip\"\n        id={pad.key}\n        src={`${process.env.PUBLIC_URL}/sounds/${pad.name}.wav`}\n      />\n    </Button>\n  );\n}\n\nexport default DrumPad;\n","import React from 'react';\nimport DrumPad from './DrumPad';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction DrumSet({ onClick }) {\n  const drumSet = [\n    [\n      { key: 'Q', name: 'open-hat' },\n      { key: 'W', name: 'closed-hat' },\n      { key: 'E', name: 'crash' },\n    ],\n    [\n      { key: 'A', name: 'side-stick' },\n      { key: 'S', name: 'snare' },\n      { key: 'D', name: 'snare-buzz' },\n    ],\n    [\n      { key: 'Z', name: 'clap' },\n      { key: 'X', name: 'tom' },\n      { key: 'C', name: 'kick' },\n    ],\n  ];\n\n  return (\n    <Container className=\"h-75 p-0\" fluid>\n      {drumSet.map((row, rowIndex) => (\n        <Row className=\"h-33 m-0\" key={rowIndex}>\n          {row.map((col, colIndex) => (\n            <Col className=\"p-1\" key={colIndex}>\n              <DrumPad pad={col} onClick={onClick} />\n            </Col>\n          ))}\n        </Row>\n      ))}\n    </Container>\n  );\n}\n\nexport default DrumSet;\n","import React, { useState, useEffect } from 'react';\nimport DrumDisplay from './components/DrumDisplay';\nimport DrumSet from './components/DrumSet';\nimport Container from 'react-bootstrap/Container';\nimport './App.css';\n\nfunction App() {\n  const [output, setOutput] = useState('select pad');\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  function handleKeyDown({ key }) {\n    const KEY = key.toUpperCase();\n\n    if (!['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'].includes(KEY)) return;\n\n    const audioElem = document.getElementById(KEY);\n    const button = audioElem.closest('.drum-pad');\n    setOutput(button.value);\n    audioElem.play();\n  }\n\n  function handleClick({ target: button }) {\n    const audioElem = button.querySelector('.clip');\n    setOutput(button.value);\n    audioElem.play();\n  }\n\n  return (\n    <Container className=\"bg-dark m-0 p-1 vh-100\" fluid id=\"drum-machine\">\n      <DrumDisplay output={output} />\n      <DrumSet onClick={handleClick} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}