{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Display","props","output","react_default","a","createElement","Container_default","className","fluid","Card_default","id","Body","DrumSet","onClick","key","name","map","row","index","DrumRow","cols","Row_default","col","Col_default","DrumPad","pad","Button_default","block","value","variant","src","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playAudio","audioElem","play","catch","err","console","log","handleKeyDown","event","toUpperCase","includes","element","document","getElementById","parent","closest","setState","handleClick","target","querySelector","state","addEventListener","removeEventListener","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbcc6462.chunk.js","sourcesContent":["import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport './App.css'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = { output: 'select pad' }\n  }\n\n  componentDidMount () {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  playAudio = (audioElem) => {\n    audioElem.play().catch(err => console.log(err))\n  }\n\n  handleKeyDown = (event) => {\n    const DRUM_PAD = '.drum-pad'\n    const VALID_KEYS = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C']\n    const key = event.key.toUpperCase()\n\n    if (VALID_KEYS.includes(key)) {\n      const element = document.getElementById(key)\n      const parent = element.closest(DRUM_PAD)\n      this.setState({ output: parent.value })\n      this.playAudio(element)\n    }\n  }\n\n  handleClick = (event) => {\n    const CLIP = '.clip'\n    const element = event.target\n    this.setState({ output: element.value })\n    this.playAudio(element.querySelector(CLIP))\n  }\n\n  render () {\n    const handleClick = this.handleClick\n    const output = this.state.output\n\n    return (\n      <Container className=\"bg-dark m-0 p-1 vh-100\" fluid id=\"drum-machine\">\n        <Display output={output}/>\n        <DrumSet onClick={handleClick}/>\n      </Container>\n    )\n  }\n}\n\nfunction Display (props) {\n  const output = props.output\n\n  return (\n    <Container className=\"h-25 p-1\" fluid>\n      <Card className=\"bg-info h-100 rounded-lg text-center\" id=\"display\">\n        <Card.Body className=\"center-vertical\">{output}</Card.Body>\n      </Card>\n    </Container>\n  )\n}\n\nfunction DrumSet (props) {\n  const onClick = props.onClick\n  const drumSet = [\n    [\n      { key: 'Q', name: 'open-hat' },\n      { key: 'W', name: 'closed-hat' },\n      { key: 'E', name: 'crash' },\n    ],\n    [\n      { key: 'A', name: 'side-stick' },\n      { key: 'S', name: 'snare' },\n      { key: 'D', name: 'snare-buzz' },\n    ],\n    [\n      { key: 'Z', name: 'clap' },\n      { key: 'X', name: 'tom' },\n      { key: 'C', name: 'kick' },\n    ],\n  ]\n\n  return (\n    <Container className=\"h-75 p-0\" fluid>\n      {drumSet.map(\n        (row, index) => <DrumRow cols={row} key={index} onClick={onClick}/>,\n      )}\n    </Container>\n  )\n}\n\nfunction DrumRow (props) {\n  const { cols, onClick } = props\n\n  return (\n    <Row className=\"h-33 m-0\">\n      {cols.map(\n        col => <Col className=\"p-1\" key={col.key}>\n          <DrumPad onClick={onClick} pad={col}/>\n        </Col>,\n      )}\n    </Row>\n  )\n}\n\nfunction DrumPad (props) {\n  const { onClick, pad } = props\n  const PATH = 'sounds/'\n  const WAV = '.wav'\n\n  return (\n    <Button\n      block className=\"drum-pad h-100 p-0 rounded-lg\" id={pad.name}\n      onClick={onClick} value={pad.name} variant=\"info\"\n    >\n      {pad.key}\n      <audio className=\"clip\" id={pad.key} src={PATH + pad.name + WAV}/>\n    </Button>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.querySelector('#root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}